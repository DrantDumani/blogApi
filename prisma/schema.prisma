// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id Int @id @default(autoincrement())
  username String @db.VarChar(20) @unique
  email String @db.VarChar(320) @unique
  password String
  role Role @default(User)
  blogPosts Posts[] @relation("WrittenPosts")
  comments Comments[]
  likes Posts[] @relation("LikedPosts")
}

model Posts {
  id Int @id @default(autoincrement())
  title String @db.VarChar(80) @unique
  subTitle String @db.VarChar(80)
  content String
  author Users @relation("WrittenPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
  comments Comments[]
  timestamp DateTime @default(now())
  edited_at DateTime?
  published Boolean @default(false)
  tags Tags[]
  likes Users[] @relation("LikedPosts")
}

model Comments {
  id Int @id @default(autoincrement())
  content String @db.VarChar(400)
  author Users @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
  timestamp DateTime @default(now())
  blogPost Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Tags {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(180)
  posts Posts[]
}

enum Role {
  User
  Author
  Super
}
